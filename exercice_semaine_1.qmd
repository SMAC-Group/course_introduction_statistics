---
title: "Exercice Semaine 1"
format:
  html:
    html-math-method: mathjax
    includes:
      in_header: |
        <script type="text/javascript" async
          src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
        </script>

editor: visual
---

<p>This is a test: \\( \\beta \\)</p>

\\( \\beta \\)


```{r, echo = FALSE, results='asis'}
knitr::opts_chunk$set(echo = FALSE)

# Uncomment to change widget colours:
#style_widgets(incorrect = "goldenrod", correct = "purple", highlight = "firebrick")
```




```{r}
opts <- c(
   "the probability that the null hypothesis is true",
   answer = "the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true",
   "the probability of making an error in your conclusion",
     "the value of \\( \\beta \\) is a parameter in the model" 
)
```

## Question 1

::: {.webex-check}


```{r, results='asis'}
cat("What is a p-value?")
```

```{r}

add_backslashes <- function(input_string) {
  # Use regular expressions to replace single backslashes with double backslashes
  result <- gsub("\\\\", "\\\\\\\\", input_string)
  return(result)
}


longmcq2 <- function(opts) {
  
  
  
  ix <- which(names(opts) == "answer")
  if (length(ix) == 0) {
    stop("The question has no correct answer")
  }
  
  # Encode special characters
  opts2 <- gsub("\'", "&apos;", opts, fixed = TRUE)
  
  # Add mathjax wrapper to LaTeX expressions (fix regex)
  opts2 <- gsub("\\\\\\((.*?)\\\\\\)", "\\\\(\\1\\\\)", opts2)  # Wrap LaTeX expressions correctly
  
  # Generate a unique name for the radio buttons
  qname <- paste0("radio_", paste(sample(LETTERS, 10, T), collapse = ""))
  options <- sprintf('<label><input type="radio" autocomplete="off" name="%s" value="%s"></input> <span>%s</span></label>', qname, names(opts), opts2)
  
  # HTML format for display
  html <- paste0("<div class='webex-radiogroup' id='", qname, "'>",
                 paste(options, collapse = ""),
                 "</div>\n")
  
  # PDF format (no changes here)
  pdf_opts <- sprintf("* (%s) %s  ", LETTERS[seq_along(opts2)], opts2)
  pdf <- paste0("\n\n", paste(pdf_opts, collapse = "\n"), "\n\n")
  
  # Check the output format and return the appropriate version
  out_fmt <- knitr::opts_knit$get("out.format")
  pandoc_to <- knitr::opts_knit$get("rmarkdown.pandoc.to")
  
  add_backslashes( ifelse((is.null(out_fmt) & is.null(pandoc_to)) ||
                            isTRUE(out_fmt == "html") ||
                            isTRUE(pandoc_to == "html"),
                          html, pdf))
  
  
 
}

```




```{r, results='asis'}
cat(longmcq2(opts))
```

:::


<!-- Button for Explanation -->
<button onclick="toggleAlert('The p-value is the probability of observing the data or something more extreme, given that the null hypothesis is true. For example, \\( \\beta \\) is a random variable.', 'explanation')">
  Explanation
</button>

<!-- Button for Hint -->
<button onclick="toggleAlert('Consider how changes in the test statistic relate to the p-value, which depends on the sample data.', 'hint')">
  Hint
</button>

<!-- Alert Box -->
<div id="myAlert" class="alert alert-info" style="display: none;">
  <strong id="alertType"></strong>: <span id="alertMessage"></span>
</div>




<!-- JavaScript -->
<script type="text/javascript">
function toggleAlert(message, type) {
  var alertBox = document.getElementById("myAlert");
  var alertMessage = document.getElementById("alertMessage");
  var alertType = document.getElementById("alertType");

  // Check if the alert box is currently visible
  if (alertBox.style.display === "block") {
    // Hide the alert box if it's already visible
    alertBox.style.display = "none";
  } else {
    // Otherwise, show the alert box and set the message and type
    alertMessage.innerHTML = message;
    alertType.innerHTML = (type === 'hint') ? 'Hint' : 'Explanation'; // Change title based on type

    // Change style based on type (yellow for hint, green for explanation)
    alertBox.style.backgroundColor = (type === 'hint') ? '#FFFF7F' : '#C0EDC2';  // Yellow for hint, green for explanation
    alertBox.style.display = "block";  // Show the alert

    MathJax.typesetPromise([alertMessage]);  // Re-render math with MathJax v3
  }
}
</script>

<!-- CSS for Styling -->
<style>
/* Custom styles for the alert box */
.alert {
  padding: 15px;
  color: black;
  margin-bottom: 15px;
  border-radius: 20px;
  font-size: 16px;
}
</style>



<!-- CSS for Styling -->
<style>
/* Custom styles for the alert box */
.alert {
  padding: 15px;
  background-color: #C0EDC2; 
  color: black;
  margin-bottom: 15px;
  border-radius: 20px;
}
</style>

<!-- MathJax for Rendering Math -->
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-mml-chtml.js">
</script>

